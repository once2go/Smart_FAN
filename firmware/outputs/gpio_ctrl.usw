file.open("gpio_ctrl.lua","w+")
file.writeline([[function save_settings()]])
file.writeline([[dofile("write_setngs.lua")]])
file.writeline([[end]])
file.writeline([[function set_rotate(rotate)]])
file.writeline([[if rotate == true then]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[gpio.write(ROTATOR, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[else]])
file.writeline([[gpio.write(ROTATOR, gpio.LOW)]])
file.writeline([[end]])
file.writeline([[IS_ROTATE = rotate]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function set_mode(mode)]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.LOW)]])
file.writeline([[tmr.delay(SWITCHING_MODE_DELAY)]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[if mode == LOW_MODE then]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[if mode == MED_MODE then]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[if mode == HIGH_MODE then]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[FAN_MODE = mode]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function set_power_on(is_pow_on)]])
file.writeline([[if is_pow_on == true then]])
file.writeline([[IS_POWER_ON = true]])
file.writeline([[set_rotate(IS_ROTATE)]])
file.writeline([[set_mode(FAN_MODE)]])
file.writeline([[else]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.LOW)]])
file.writeline([[gpio.write(ROTATOR, gpio.LOW)]])
file.writeline([[IS_POWER_ON= false]])
file.writeline([[end]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function hard_on_off()]])
file.writeline([[is_handling = true]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[set_power_on(false)]])
file.writeline([[else]])
file.writeline([[set_power_on(true)]])
file.writeline([[end]])
file.writeline([[tmr.delay(BUTTON_DELAY)]])
file.writeline([[is_handling = false]])
file.writeline([[end]])
file.writeline([[function handle_interupt()]])
file.writeline([[if is_handling == false then hard_on_off() end]])
file.writeline([[end]])
file.writeline([[function read_t_h()]])
file.writeline([[resp = '']])
file.writeline([[status, temp, humi, temp_dec, humi_dec = dht.read(DHT)]])
file.writeline([[if status == dht.OK then]])
file.writeline([[resp = '{"data":{"temp":'..temp..', "hum":'..humi..'}}']])
file.writeline([[elseif status == dht.ERROR_CHECKSUM then]])
file.writeline([[resp = "DHT Checksum error."]])
file.writeline([[elseif status == dht.ERROR_TIMEOUT then]])
file.writeline([[resp = "DHT timed out."]])
file.writeline([[end]])
file.writeline([[print(resp)]])
file.writeline([[return resp]])
file.writeline([[end]])
file.writeline([[gpio.trig(BUTTON, "down", handle_interupt)]])
file.writeline([[l = file.list();]])
file.writeline([[for k,v in pairs(l) do]])
file.writeline([[if k == "settings.lua" then dofile("settings.lua") end]])
file.writeline([[end]])
file.writeline([[set_power_on(IS_POWER_ON)]])
file.writeline([[set_mode(tonumber(FAN_MODE))]])
file.writeline([[set_rotate(IS_ROTATE)]])
file.flush()
file.close()

