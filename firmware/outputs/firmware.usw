file.open("gpio_ctrl.lua","w+")
file.writeline([[function save_settings()]])
file.writeline([[dofile("write_setngs.lua")]])
file.writeline([[end]])
file.writeline([[function set_rotate(rotate)]])
file.writeline([[if rotate == true then]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[gpio.write(ROTATOR, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[else]])
file.writeline([[gpio.write(ROTATOR, gpio.LOW)]])
file.writeline([[end]])
file.writeline([[IS_ROTATE = rotate]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function set_mode(mode)]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.LOW)]])
file.writeline([[tmr.delay(SWITCHING_MODE_DELAY)]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[if mode == LOW_MODE then]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[if mode == MED_MODE then]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[if mode == HIGH_MODE then]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.HIGH)]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[FAN_MODE = mode]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function set_power_on(is_pow_on)]])
file.writeline([[if is_pow_on == true then]])
file.writeline([[IS_POWER_ON = true]])
file.writeline([[set_rotate(IS_ROTATE)]])
file.writeline([[set_mode(FAN_MODE)]])
file.writeline([[else]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.LOW)]])
file.writeline([[gpio.write(ROTATOR, gpio.LOW)]])
file.writeline([[IS_POWER_ON= false]])
file.writeline([[end]])
file.writeline([[save_settings()]])
file.writeline([[end]])
file.writeline([[function hard_on_off()]])
file.writeline([[is_handling = true]])
file.writeline([[if IS_POWER_ON == true then]])
file.writeline([[set_power_on(false)]])
file.writeline([[else]])
file.writeline([[set_power_on(true)]])
file.writeline([[end]])
file.writeline([[tmr.delay(BUTTON_DELAY)]])
file.writeline([[is_handling = false]])
file.writeline([[end]])
file.writeline([[function handle_interupt()]])
file.writeline([[if is_handling == false then hard_on_off() end]])
file.writeline([[end]])
file.writeline([[function read_t_h()]])
file.writeline([[resp = '']])
file.writeline([[status, temp, humi, temp_dec, humi_dec = dht.read(DHT)]])
file.writeline([[if status == dht.OK then]])
file.writeline([[resp = '{"data":{"temp":'..temp..', "hum":'..humi..'}}']])
file.writeline([[elseif status == dht.ERROR_CHECKSUM then]])
file.writeline([[resp = "DHT Checksum error."]])
file.writeline([[elseif status == dht.ERROR_TIMEOUT then]])
file.writeline([[resp = "DHT timed out."]])
file.writeline([[end]])
file.writeline([[print(resp)]])
file.writeline([[return resp]])
file.writeline([[end]])
file.writeline([[gpio.trig(BUTTON, "down", handle_interupt)]])
file.writeline([[l = file.list();]])
file.writeline([[for k,v in pairs(l) do]])
file.writeline([[if k == "settings.lua" then dofile("settings.lua") end]])
file.writeline([[end]])
file.writeline([[set_power_on(IS_POWER_ON)]])
file.writeline([[set_mode(tonumber(FAN_MODE))]])
file.writeline([[set_rotate(IS_ROTATE)]])
file.flush()
file.close()

file.open("write_setngs.lua","w+")
file.writeline([[file.remove("settings.lua")]])
file.writeline([[file.open("settings.lua","w+")]])
file.writeline([[temp = "IS_ROTATE = \""..tostring(IS_ROTATE).."\""]])
file.writeline([[file.writeline(temp)]])
file.writeline([[temp = "IS_POWER_ON = \""..tostring(IS_POWER_ON).."\""]])
file.writeline([[file.writeline(temp)]])
file.writeline([[temp = "FAN_MODE = \""..FAN_MODE.."\""]])
file.writeline([[file.writeline(temp)]])
file.writeline([[file.flush()]])
file.writeline([[temp = nil]])
file.writeline([[file.close()]])
file.flush()
file.close()

file.open("init.lua","w+")
file.writeline([[dofile("gpio_setup.lua")]])
file.writeline([[dofile("gpio_ctrl.lua")]])
file.writeline([[is_credentials_exist=false]])
file.writeline([[l = file.list();]])
file.writeline([[for k,v in pairs(l) do]])
file.writeline([[if k == "credentials.lua" then is_credentials_exist=true end]])
file.writeline([[end]])
file.writeline([[if is_credentials_exist then]])
file.writeline([[print("Credential exist")]])
file.writeline([[else]])
file.writeline([[n_ssid='']])
file.writeline([[n_passwd='']])
file.writeline([[dofile("writecred.lua");]])
file.writeline([[end]])
file.writeline([[print("Hi I am smart FUN")]])
file.writeline([[dofile("credentials.lua")]])
file.writeline([[if s_ssid == nil or s_ssid == '' then]])
file.writeline([[dofile("imode.lua")]])
file.writeline([[else]])
file.writeline([[if s_passwd == nil then s_passwd = '' end]])
file.writeline([[dofile("conmode.lua")]])
file.writeline([[end]])
file.flush()
file.close()

file.open("ctrl_net.lua","w+")
file.writeline([[response = ""]])
file.writeline([[sv=net.createServer(net.TCP, 30)]])
file.writeline([[sv:listen(9898,function(c)]])
file.writeline([[c:on("receive", function(c, pl)]])
file.writeline([[t = cjson.decode(pl)]])
file.writeline([[for k,v in pairs(t) do]])
file.writeline([[if( k == "help_get") and ( v == 1) then]])
file.writeline([[response = getHelp()]])
file.writeline([[end]])
file.writeline([[if( k == "power_get") and ( v == 1) then]])
file.writeline([[response = getPowerOn()]])
file.writeline([[end]])
file.writeline([[if( k == "speed_get") and ( v == 1) then]])
file.writeline([[response = getSpeed()]])
file.writeline([[end]])
file.writeline([[if( k == "climat_get") and ( v == 1) then]])
file.writeline([[response = getClimat()]])
file.writeline([[end]])
file.writeline([[if( k == "rotate_get") and ( v == 1) then]])
file.writeline([[response = getRotate()]])
file.writeline([[end]])
file.writeline([[if( k == "power_set") then]])
file.writeline([[response = setPowerOn(v)]])
file.writeline([[end]])
file.writeline([[if( k == "speed_set") then]])
file.writeline([[response = setSpeed(v)]])
file.writeline([[end]])
file.writeline([[if( k == "rotate_set") then]])
file.writeline([[response = setRotate(v)]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[if response == '' then response = '{"status":"Unknown command"}' end]])
file.writeline([[c:send(response)]])
file.writeline([[end)]])
file.writeline([[c:send("Connected")]])
file.writeline([[end)]])
file.flush()
file.close()

file.open("credset.lua","w+")
file.writeline([[ready = false]])
file.writeline([[response = ""]])
file.writeline([[sv=net.createServer(net.TCP, 30)]])
file.writeline([[sv:listen(9899,function(c)]])
file.writeline([[c:on("receive", function(c, pl)]])
file.writeline([[t = cjson.decode(pl)]])
file.writeline([[for k,v in pairs(t) do]])
file.writeline([[if( k == "credentials") and ( v == "set") then]])
file.writeline([[ready = true]])
file.writeline([[response = '{"status":"OK"}']])
file.writeline([[end]])
file.writeline([[if ready and ( k == "ssid") then]])
file.writeline([[if (v == nil) or (v == '') then]])
file.writeline([[response = '{"status":"SSID not correct"}']])
file.writeline([[else]])
file.writeline([[n_ssid = v]])
file.writeline([[response = '{"status":"OK"}']])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[if ready and ( k == "password") then]])
file.writeline([[n_passwd = v]])
file.writeline([[response = '{"status":"OK"}']])
file.writeline([[end]])
file.writeline([[if ready and ( k == "config") then]])
file.writeline([[if v then]])
file.writeline([[dofile("writecred.lua")]])
file.writeline([[else]])
file.writeline([[node.restart()]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[if response == '' then response = '{"status":"Unknown command"}' end]])
file.writeline([[end]])
file.writeline([[c:send(response)]])
file.writeline([[end)]])
file.writeline([[c:send("Connected")]])
file.writeline([[end)]])
file.flush()
file.close()

file.open("conmode.lua","w+")
file.writeline([[print("Connect to "..s_ssid..". Please wait")]])
file.writeline([[wifi.setmode(wifi.STATION)]])
file.writeline([[wifi.sta.config(s_ssid, s_passwd)]])
file.writeline([[wifi.sta.connect()]])
file.writeline([[value = true]])
file.writeline([[function indicate(isIndicate)]])
file.writeline([[if isIndicate == true then]])
file.writeline([[tmr.alarm(2, 500, 1, function ()]])
file.writeline([[gpio.write(NET_INDICATOR, value and gpio.HIGH or gpio.LOW)]])
file.writeline([[value = not value]])
file.writeline([[end)]])
file.writeline([[else]])
file.writeline([[tmr.stop(2)]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[indicate(true)]])
file.writeline([[cnt = 0]])
file.writeline([[tmr.alarm(1, 3000, 1, function()]])
file.writeline([[if (wifi.sta.getip() == nil) and (cnt < 5) then]])
file.writeline([[print("Wait...")]])
file.writeline([[cnt = cnt + 1]])
file.writeline([[else]])
file.writeline([[tmr.stop(1)]])
file.writeline([[indicate(false)]])
file.writeline([[if (cnt < 5) then]])
file.writeline([[print("Config done, IP is "..wifi.sta.getip())]])
file.writeline([[gpio.write(NET_INDICATOR, gpio.HIGH)]])
file.writeline([[dofile("gpio_net.lua")]])
file.writeline([[else]])
file.writeline([[dofile("imode.lua")]])
file.writeline([[gpio.write(NET_INDICATOR, gpio.LOW)]])
file.writeline([[end]])
file.writeline([[cnt = nil]])
file.writeline([[collectgarbage()]])
file.writeline([[end]])
file.writeline([[end)]])
file.flush()
file.close()

file.open("gpio_setup.lua","w+")
file.writeline([[DHT=2]])
file.writeline([[ROTATOR=0]])
file.writeline([[ENGINE_LOW=5]])
file.writeline([[ENGINE_MIDLE=6]])
file.writeline([[ENGINE_HIGH=7]])
file.writeline([[BUTTON=4]])
file.writeline([[NET_INDICATOR = 8]])
file.writeline([[BUTTON_DELAY=10000]])
file.writeline([[SWITCHING_MODE_DELAY=5000]])
file.writeline([[LOW_MODE=435]])
file.writeline([[MED_MODE=436]])
file.writeline([[HIGH_MODE=437]])
file.writeline([[is_handling=false]])
file.writeline([[gpio.mode(ROTATOR, gpio.OUTPUT)]])
file.writeline([[gpio.mode(ENGINE_LOW, gpio.OUTPUT)]])
file.writeline([[gpio.mode(ENGINE_MIDLE, gpio.OUTPUT)]])
file.writeline([[gpio.mode(ENGINE_HIGH, gpio.OUTPUT)]])
file.writeline([[gpio.mode(NET_INDICATOR, gpio.OUTPUT)]])
file.writeline([[gpio.write(ENGINE_LOW, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_MIDLE, gpio.LOW)]])
file.writeline([[gpio.write(ENGINE_HIGH, gpio.LOW)]])
file.writeline([[gpio.write(ROTATOR, gpio.LOW)]])
file.writeline([[gpio.write(NET_INDICATOR, gpio.LOW)]])
file.writeline([[gpio.mode(BUTTON,gpio.INT,gpio.PULLUP)]])
file.writeline([[IS_ROTATE=false]])
file.writeline([[IS_POWER_ON=false]])
file.writeline([[FAN_MODE=LOW_MODE]])
file.flush()
file.close()

file.open("imode.lua","w+")
file.writeline([[wifi.setmode(wifi.SOFTAP)]])
file.writeline([[cfg={}]])
file.writeline([[cfg.ssid="I_am_smart_FAN"]])
file.writeline([[cfg.pwd="11111111"]])
file.writeline([[wifi.ap.config(cfg)]])
file.writeline([[dofile("credset.lua")]])
file.writeline([[print("Waiting for setup")]])
file.flush()
file.close()

file.open("writecred.lua","w+")
file.writeline([[file.remove("credentials.lua")]])
file.writeline([[file.open("credentials.lua","w+")]])
file.writeline([[temp = "s_ssid = \""..n_ssid.."\""]])
file.writeline([[file.writeline(temp)]])
file.writeline([[temp = "s_passwd = \""..n_passwd.."\""]])
file.writeline([[file.writeline(temp)]])
file.writeline([[file.flush()]])
file.writeline([[temp = nil]])
file.writeline([[file.close()]])
file.writeline([[node.restart()]])
file.flush()
file.close()

file.open("gpio_net.lua","w+")
file.writeline([[function getPowerOn()]])
file.writeline([[return '{"power":'..tostring(IS_POWER_ON)..'}']])
file.writeline([[end]])
file.writeline([[function getSpeed()]])
file.writeline([[return '{"speed":'..tostring(FAN_MODE)..'}']])
file.writeline([[end]])
file.writeline([[function getRotate()]])
file.writeline([[return '{"rotate":'..tostring(IS_ROTATE)..'}']])
file.writeline([[end]])
file.writeline([[function getClimat()]])
file.writeline([[return read_t_h()]])
file.writeline([[end]])
file.writeline([[function setSpeed(speed)]])
file.writeline([[set_mode(speed)]])
file.writeline([[return '{"speed":'..speed..'}']])
file.writeline([[end]])
file.writeline([[function setRotate(rotate)]])
file.writeline([[set_rotate(rotate)]])
file.writeline([[return '{"rotate":'..tostring(rotate)..'}']])
file.writeline([[end]])
file.writeline([[function setPowerOn(power_on)]])
file.writeline([[set_power_on(power_on)]])
file.writeline([[return '{"power":'..tostring(power_on)..'}']])
file.writeline([[end]])
file.writeline([[function getHelp()]])
file.writeline([[return '{"help":"  -lalal\n  -blabla \n -ololo \n"}']])
file.writeline([[end]])
file.writeline([[dofile("ctrl_net.lua")]])
file.flush()
file.close()

