file.open("bmp180.lua","w+")
file.writeline([[ADDR = 0x77]])
file.writeline([[REG_CALIBRATION = 0xAA]])
file.writeline([[REG_CONTROL = 0xF4]])
file.writeline([[REG_RESULT = 0xF6]])
file.writeline([[COMMAND_TEMPERATURE = 0x2E]])
file.writeline([[COMMAND_PRESSURE = {0x34, 0x74, 0xB4, 0xF4}]])
file.writeline([[AC1=0]])
file.writeline([[AC2=0]])
file.writeline([[AC3=0]])
file.writeline([[AC4=0]])
file.writeline([[AC5=0]])
file.writeline([[AC6=0]])
file.writeline([[B1=0]])
file.writeline([[B2=0]])
file.writeline([[MB=0]])
file.writeline([[MC=0]])
file.writeline([[MD=0]])
file.writeline([[bmp180_t=0]])
file.writeline([[bmp180_p=0]])
file.writeline([[bmp180_is_init = false]])
file.writeline([[bmp180_id = 0]])
file.writeline([[function twoCompl(value)]])
file.writeline([[if value > 32767 then value = -(65535 - value + 1)]])
file.writeline([[end]])
file.writeline([[return value]])
file.writeline([[end]])
file.writeline([[function read_reg(reg_addr, length)]])
file.writeline([[i2c.start(bmp180_id)]])
file.writeline([[i2c.address(bmp180_id, ADDR, i2c.TRANSMITTER)]])
file.writeline([[i2c.write(bmp180_id, reg_addr)]])
file.writeline([[i2c.stop(bmp180_id)]])
file.writeline([[i2c.start(bmp180_id)]])
file.writeline([[i2c.address(bmp180_id, ADDR,i2c.RECEIVER)]])
file.writeline([[c = i2c.read(bmp180_id, length)]])
file.writeline([[i2c.stop(bmp180_id)]])
file.writeline([[return c]])
file.writeline([[end]])
file.writeline([[function write_reg(reg_addr, reg_val)]])
file.writeline([[i2c.start(bmp180_id)]])
file.writeline([[i2c.address(bmp180_id, ADDR, i2c.TRANSMITTER)]])
file.writeline([[i2c.write(bmp180_id, reg_addr)]])
file.writeline([[i2c.write(bmp180_id, reg_val)]])
file.writeline([[i2c.stop(bmp180_id)]])
file.writeline([[end]])
file.writeline([[function bmp180_init(sda, scl)]])
file.writeline([[i2c.setup(bmp180_id, sda, scl, i2c.SLOW)]])
file.writeline([[local calibration = read_reg(REG_CALIBRATION, 22)]])
file.writeline([[AC1 = twoCompl(string.byte(calibration, 1) * 256 + string.byte(calibration, 2))]])
file.writeline([[AC2 = twoCompl(string.byte(calibration, 3) * 256 + string.byte(calibration, 4))]])
file.writeline([[AC3 = twoCompl(string.byte(calibration, 5) * 256 + string.byte(calibration, 6))]])
file.writeline([[AC4 = string.byte(calibration, 7) * 256 + string.byte(calibration, 8)]])
file.writeline([[AC5 = string.byte(calibration, 9) * 256 + string.byte(calibration, 10)]])
file.writeline([[AC6 = string.byte(calibration, 11) * 256 + string.byte(calibration, 12)]])
file.writeline([[B1 = twoCompl(string.byte(calibration, 13) * 256 + string.byte(calibration, 14))]])
file.writeline([[B2 = twoCompl(string.byte(calibration, 15) * 256 + string.byte(calibration, 16))]])
file.writeline([[MB = twoCompl(string.byte(calibration, 17) * 256 + string.byte(calibration, 18))]])
file.writeline([[MC = twoCompl(string.byte(calibration, 19) * 256 + string.byte(calibration, 20))]])
file.writeline([[MD = twoCompl(string.byte(calibration, 21) * 256 + string.byte(calibration, 22))]])
file.writeline([[bmp180_is_init = true]])
file.writeline([[end]])
file.writeline([[function read_temp()]])
file.writeline([[write_reg(REG_CONTROL, COMMAND_TEMPERATURE)]])
file.writeline([[tmr.delay(5000)]])
file.writeline([[local dataT = read_reg(REG_RESULT, 2)]])
file.writeline([[UT = string.byte(dataT, 1) * 256 + string.byte(dataT, 2)]])
file.writeline([[local X1 = (UT - AC6) * AC5 / 32768]])
file.writeline([[local X2 = MC * 2048 / (X1 + MD)]])
file.writeline([[B5 = X1 + X2]])
file.writeline([[bmp180_t = (B5 + 8) / 16]])
file.writeline([[return(t)]])
file.writeline([[end]])
file.writeline([[function read_pressure(oss)]])
file.writeline([[write_reg(REG_CONTROL, COMMAND_PRESSURE[oss + 1]);]])
file.writeline([[tmr.delay(30000);]])
file.writeline([[local dataP = read_reg(0xF6, 3)]])
file.writeline([[local UP = string.byte(dataP, 1) * 65536 + string.byte(dataP, 2) * 256 + string.byte(dataP, 1)]])
file.writeline([[UP = UP / 2 ^ (8 - oss)]])
file.writeline([[local B6 = B5 - 4000]])
file.writeline([[local X1 = B2 * (B6 * B6 / 4096) / 2048]])
file.writeline([[local X2 = AC2 * B6 / 2048]])
file.writeline([[local X3 = X1 + X2]])
file.writeline([[local B3 = ((AC1 * 4 + X3) * 2 ^ oss + 2) / 4]])
file.writeline([[X1 = AC3 * B6 / 8192]])
file.writeline([[X2 = (B1 * (B6 * B6 / 4096)) / 65536]])
file.writeline([[X3 = (X1 + X2 + 2) / 4]])
file.writeline([[local B4 = AC4 * (X3 + 32768) / 32768]])
file.writeline([[local B7 = (UP - B3) * (50000/2 ^ oss)]])
file.writeline([[bmp180_p = (B7 / B4) * 2]])
file.writeline([[X1 = (bmp180_p / 256) * (bmp180_p / 256)]])
file.writeline([[X1 = (X1 * 3038) / 65536]])
file.writeline([[X2 = (-7357 * bmp180_p) / 65536]])
file.writeline([[bmp180_p = bmp180_p +(X1 + X2 + 3791) / 16]])
file.writeline([[return (bmp180_p)]])
file.writeline([[end]])
file.writeline([[function bmp180_read(oss)]])
file.writeline([[if (oss == nil) then]])
file.writeline([[oss = 0]])
file.writeline([[end]])
file.writeline([[if (not bmp180_is_init) then]])
file.writeline([[print("init() must be called before read.")]])
file.writeline([[else]])
file.writeline([[read_temp()]])
file.writeline([[read_pressure(oss)]])
file.writeline([[end]])
file.writeline([[end;]])
file.writeline([[function bmp180_getTemperature()]])
file.writeline([[return bmp180_t]])
file.writeline([[end]])
file.writeline([[function bmp180_getPressure()]])
file.writeline([[return bmp180_p]])
file.writeline([[end]])
file.flush()
file.close()

